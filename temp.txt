 import tkinter as tk

main = tk.Tk()

options = {"text": "Hello!", "font": "Arial 16", "width": 2, "height": 2}

Num4 = tk.Button(main, **options)
Num4.pack()

main.mainloop()
 
 def CreateVerbPrefix(self):
        C_H_BG_COLOR="grey"
        C_H_FG_COLOR="red"
        R_H_BG_COLOR="grey"
        R_H_FG_COLOR="blue"
        CELL_BG_COLOR="lightgrey"
        CELL_FG_COLOR="black"
        
        ##### Create verb prefix table
        ##### Column Labels
        Label(self.root, text="test", bg=C_H_BG_COLOR, fg=C_H_FG_COLOR).grid(row=0, column=0, columnspan=8)
        Label(self.root, text="OBJECT", bg=C_H_BG_COLOR, fg=C_H_FG_COLOR).grid(row=0, column=0)
        Label(self.root, text="none", bg=C_H_BG_COLOR, fg=C_H_FG_COLOR).grid(row=0, column=1, ipadx=5, ipady=1, padx=5, pady=0)
        Label(self.root, text="me", bg=C_H_BG_COLOR, fg=C_H_FG_COLOR).grid(row=0, column=2)
        Label(self.root, text="you", bg=C_H_BG_COLOR, fg=C_H_FG_COLOR).grid(row=0, column=3)
        Label(self.root, text="him/her/it", bg=C_H_BG_COLOR, fg=C_H_FG_COLOR).grid(row=0, column=4)
        Label(self.root, text="us", bg=C_H_BG_COLOR, fg=C_H_FG_COLOR).grid(row=0, column=5)
        Label(self.root, text="you (plural)", bg=C_H_BG_COLOR, fg=C_H_FG_COLOR).grid(row=0, column=6)
        Label(self.root, text="them", bg=C_H_BG_COLOR, fg=C_H_FG_COLOR).grid(row=0, column=7)
        ##### Row Names
        Label(self.root, text="SUBJECT", bg=R_H_BG_COLOR, fg=R_H_FG_COLOR).grid(row=1, column=0)
        Label(self.root, text="I", bg=R_H_BG_COLOR, fg=R_H_FG_COLOR).grid(row=2, column=0)
        Label(self.root, text="you", bg=R_H_BG_COLOR, fg=R_H_FG_COLOR).grid(row=3, column=0)
        Label(self.root, text="he/she/it", bg=R_H_BG_COLOR, fg=R_H_FG_COLOR).grid(row=4, column=0)
        Label(self.root, text="we", bg=R_H_BG_COLOR, fg=R_H_FG_COLOR).grid(row=5, column=0)
        Label(self.root, text="you(plural)", bg=R_H_BG_COLOR, fg=R_H_FG_COLOR).grid(row=6, column=0)
        Label(self.root, text="they", bg=R_H_BG_COLOR, fg=R_H_FG_COLOR).grid(row=7, column=0)

        #I-OBJECT Row
        Label(self.root, text="jI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=2, column=1, ipadx=5, ipady=1, padx=5, pady=0)
        Label(self.root, text="---", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=2, column=2)
        Label(self.root, text="qa-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=2, column=3)
        Label(self.root, text="vI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=2, column=4)
        Label(self.root, text="---", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=2, column=5)
        Label(self.root, text="Sa-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=2, column=6)
        Label(self.root, text="vI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=2, column=7)

        #you-OBJECT Row
        Label(self.root, text="bI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=3, column=1, ipadx=5, ipady=1, padx=5, pady=0)
        Label(self.root, text="cho-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=3, column=2)
        Label(self.root, text="---", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=3, column=3)
        Label(self.root, text="Da-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=3, column=4)
        Label(self.root, text="ju-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=3, column=5)
        Label(self.root, text="---", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=3, column=6)
        Label(self.root, text="Da-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=3, column=7)

        #he/she/it-OBJECT Row
        Label(self.root, text="0", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=4, column=1, ipadx=5, ipady=1, padx=5, pady=0)
        Label(self.root, text="mu-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=4, column=2)
        Label(self.root, text="Du-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=4, column=3)
        Label(self.root, text="0", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=4, column=4)
        Label(self.root, text="nu-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=4, column=5)
        Label(self.root, text="lI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=4, column=6)
        Label(self.root, text="0", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=4, column=7)

        #we-OBJECT Row
        Label(self.root, text="ma-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=5, column=1, ipadx=5, ipady=1, padx=5, pady=0)
        Label(self.root, text="---", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=5, column=2)
        Label(self.root, text="pI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=5, column=3)
        Label(self.root, text="wI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=5, column=4)
        Label(self.root, text="---", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=5, column=5)
        Label(self.root, text="re-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=5, column=6)
        Label(self.root, text="DI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=5, column=7)

        #you(plural)-OBJECT Row
        Label(self.root, text="Su-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=6, column=1, ipadx=5, ipady=1, padx=5, pady=0)
        Label(self.root, text="tu-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=6, column=2)
        Label(self.root, text="---", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=6, column=3)
        Label(self.root, text="bo-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=6, column=4)
        Label(self.root, text="cho-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=6, column=5)
        Label(self.root, text="---", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=6, column=6)
        Label(self.root, text="bo-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=6, column=7)

        #they-OBJECT Row
        Label(self.root, text="0", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=7, column=1, ipadx=5, ipady=1, padx=5, pady=0)
        Label(self.root, text="mu-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=7, column=2)
        Label(self.root, text="nI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=7, column=3)
        Label(self.root, text="lu-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=7, column=4)
        Label(self.root, text="nu-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=7, column=5)
        Label(self.root, text="lI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=7, column=6)
        Label(self.root, text="0", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=7, column=7)


    def AddMessage(self):
        #This is for creating a multiline non-editable text, like Label.
        '''
        from tkinter import *
        main = Tk()
        ourMessage = 'This is our Message'
        messageVar = Message(main, text=ourMessage)
        messageVar.config(bg='lightgreen')
        messageVar.pack()
        main.mainloop()
        '''
    def AddText(self):
        #This also creates multiline text, like Message.
        '''
        root = Tk()
        T = Text(root, height=2, width=30)
        T.pack()
        T.insert(END, 'GeeksforGeeks\nBEST WEBSITE\n')
        mainloop()
        '''

    def AddButton(self, button_text, width, command):
        #w=Button(master, option=value)
        #command does not do anything yet.
        Button(self.root, text=button_text, width=width, command=self.root.destroy).grid(row=1)
        #btn.pack()
        pass

    def AddEntry(self):
        #SpinBox is also a type of entry for a selection of numbers.
        '''
        So we can create labels in the grid and then add the entry boxes in the next column
        master = Tk()
        Label(master, text='First Name').grid(row=0)
        Label(master, text='Last Name').grid(row=1)
        e1 = Entry(master)
        e2 = Entry(master)
        e1.grid(row=0, column=1)
        e2.grid(row=1, column=1)
        '''

        Entry(self.root).grid(row=1, column=1)
        pass

    def AddCheckBox():
        '''
        Look into sticky
        master = Tk()
        var1 = IntVar()
        Checkbutton(master, text='male', variable=var1).grid(row=0, sticky=W)
        var2 = IntVar()
        Checkbutton(master, text='female', variable=var2).grid(row=1, sticky=W)
        mainloop()
        '''
        pass

    def AddRadioButton():
        '''
        Need to see how to do these with a grid, possibly sticky?
        root = Tk()
        v = IntVar()
        Radiobutton(root, text='GfG', variable=v, value=1).pack(anchor=W)
        Radiobutton(root, text='MIT', variable=v, value=2).pack(anchor=W)
        mainloop()
        '''
        pass

    def AddListBox():
        '''
        from tkinter import *
        top = Tk()
        Lb = Listbox(top)
        Lb.insert(1, 'Python')
        Lb.insert(2, 'Java')
        Lb.insert(3, 'C++')
        Lb.insert(4, 'Any other')
        Lb.pack()
        top.mainloop()
        '''
        pass

    def AddScrollBar():
        # Most likely this will need to be called by AddListBox or other object that needs a scrollbar
        '''
        root = Tk()
        scrollbar = Scrollbar(root)
        scrollbar.pack(side=RIGHT, fill=Y)
        mylist = Listbox(root, yscrollcommand=scrollbar.set)

        for line in range(100):
            mylist.insert(END, 'This is line number' + str(line))
    
        mylist.pack(side=LEFT, fill=BOTH)
        scrollbar.config(command=mylist.yview)
        mainloop()
        '''
        pass

    def AddMenu():
        #This creates a menu bar and menu bar options.
        #Also see the Menubutton widget.
        '''
        root = Tk()
        menu = Menu(root)
        root.config(menu=menu)
        filemenu = Menu(menu)
        menu.add_cascade(label='File', menu=filemenu)
        filemenu.add_command(label='New')
        filemenu.add_command(label='Open...')
        filemenu.add_separator()
        filemenu.add_command(label='Exit', command=root.quit)
        helpmenu = Menu(menu)
        menu.add_cascade(label='Help', menu=helpmenu)
        helpmenu.add_command(label='About')
        mainloop()
        '''
        pass

    def CreateVerbPrefix(self):
        C_H_BG_COLOR="grey"
        C_H_FG_COLOR="red"
        R_H_BG_COLOR="grey"
        R_H_FG_COLOR="blue"
        CELL_BG_COLOR="lightgrey"
        CELL_FG_COLOR="black"
        
        ##### Create verb prefix table
        ##### Column Labels
        Label(self.root, text="test", bg=C_H_BG_COLOR, fg=C_H_FG_COLOR).grid(row=0, column=0, columnspan=8)
        Label(self.root, text="OBJECT", bg=C_H_BG_COLOR, fg=C_H_FG_COLOR).grid(row=0, column=0)
        Label(self.root, text="none", bg=C_H_BG_COLOR, fg=C_H_FG_COLOR).grid(row=0, column=1, ipadx=5, ipady=1, padx=5, pady=0)
        Label(self.root, text="me", bg=C_H_BG_COLOR, fg=C_H_FG_COLOR).grid(row=0, column=2)
        Label(self.root, text="you", bg=C_H_BG_COLOR, fg=C_H_FG_COLOR).grid(row=0, column=3)
        Label(self.root, text="him/her/it", bg=C_H_BG_COLOR, fg=C_H_FG_COLOR).grid(row=0, column=4)
        Label(self.root, text="us", bg=C_H_BG_COLOR, fg=C_H_FG_COLOR).grid(row=0, column=5)
        Label(self.root, text="you (plural)", bg=C_H_BG_COLOR, fg=C_H_FG_COLOR).grid(row=0, column=6)
        Label(self.root, text="them", bg=C_H_BG_COLOR, fg=C_H_FG_COLOR).grid(row=0, column=7)
        ##### Row Names
        Label(self.root, text="SUBJECT", bg=R_H_BG_COLOR, fg=R_H_FG_COLOR).grid(row=1, column=0)
        Label(self.root, text="I", bg=R_H_BG_COLOR, fg=R_H_FG_COLOR).grid(row=2, column=0)
        Label(self.root, text="you", bg=R_H_BG_COLOR, fg=R_H_FG_COLOR).grid(row=3, column=0)
        Label(self.root, text="he/she/it", bg=R_H_BG_COLOR, fg=R_H_FG_COLOR).grid(row=4, column=0)
        Label(self.root, text="we", bg=R_H_BG_COLOR, fg=R_H_FG_COLOR).grid(row=5, column=0)
        Label(self.root, text="you(plural)", bg=R_H_BG_COLOR, fg=R_H_FG_COLOR).grid(row=6, column=0)
        Label(self.root, text="they", bg=R_H_BG_COLOR, fg=R_H_FG_COLOR).grid(row=7, column=0)

        #I-OBJECT Row
        Label(self.root, text="jI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=2, column=1, ipadx=5, ipady=1, padx=5, pady=0)
        Label(self.root, text="---", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=2, column=2)
        Label(self.root, text="qa-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=2, column=3)
        Label(self.root, text="vI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=2, column=4)
        Label(self.root, text="---", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=2, column=5)
        Label(self.root, text="Sa-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=2, column=6)
        Label(self.root, text="vI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=2, column=7)

        #you-OBJECT Row
        Label(self.root, text="bI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=3, column=1, ipadx=5, ipady=1, padx=5, pady=0)
        Label(self.root, text="cho-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=3, column=2)
        Label(self.root, text="---", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=3, column=3)
        Label(self.root, text="Da-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=3, column=4)
        Label(self.root, text="ju-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=3, column=5)
        Label(self.root, text="---", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=3, column=6)
        Label(self.root, text="Da-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=3, column=7)

        #he/she/it-OBJECT Row
        Label(self.root, text="0", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=4, column=1, ipadx=5, ipady=1, padx=5, pady=0)
        Label(self.root, text="mu-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=4, column=2)
        Label(self.root, text="Du-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=4, column=3)
        Label(self.root, text="0", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=4, column=4)
        Label(self.root, text="nu-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=4, column=5)
        Label(self.root, text="lI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=4, column=6)
        Label(self.root, text="0", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=4, column=7)

        #we-OBJECT Row
        Label(self.root, text="ma-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=5, column=1, ipadx=5, ipady=1, padx=5, pady=0)
        Label(self.root, text="---", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=5, column=2)
        Label(self.root, text="pI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=5, column=3)
        Label(self.root, text="wI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=5, column=4)
        Label(self.root, text="---", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=5, column=5)
        Label(self.root, text="re-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=5, column=6)
        Label(self.root, text="DI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=5, column=7)

        #you(plural)-OBJECT Row
        Label(self.root, text="Su-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=6, column=1, ipadx=5, ipady=1, padx=5, pady=0)
        Label(self.root, text="tu-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=6, column=2)
        Label(self.root, text="---", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=6, column=3)
        Label(self.root, text="bo-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=6, column=4)
        Label(self.root, text="cho-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=6, column=5)
        Label(self.root, text="---", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=6, column=6)
        Label(self.root, text="bo-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=6, column=7)

        #they-OBJECT Row
        Label(self.root, text="0", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=7, column=1, ipadx=5, ipady=1, padx=5, pady=0)
        Label(self.root, text="mu-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=7, column=2)
        Label(self.root, text="nI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=7, column=3)
        Label(self.root, text="lu-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=7, column=4)
        Label(self.root, text="nu-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=7, column=5)
        Label(self.root, text="lI-", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=7, column=6)
        Label(self.root, text="0", bg=CELL_BG_COLOR, fg=CELL_FG_COLOR).grid(row=7, column=7)

'''
Combox box
Scale
TopLevel
Progress bar
Canvas - if we want to draw graphics, see our mazesolver project.
PannedWindow - Possibly something usefule like Grid

There are three geometry manager classes
pack() Works in blocks vertically, kind of like HTML block level elements
    # Create three buttons
    button1 = tk.Button(root, text="Button 1")
    button2 = tk.Button(root, text="Button 2")
    button3 = tk.Button(root, text="Button 3")

    # Pack the buttons vertically
    button1.pack()
    button2.pack()
    button3.pack()

grid() Works in a table, so very much like working in Excel.
    # Create three labels
    label1 = tk.Label(root, text="Label 1")
    label2 = tk.Label(root, text="Label 2")
    label3 = tk.Label(root, text="Label 3")

    # Grid the labels in a 2x2 grid
    label1.grid(row=0, column=0)
    label2.grid(row=0, column=1)
    label3.grid(row=1, column=0, columnspan=2)

place() Works like CSS top, left placement. 
    # Create a label
    label = tk.Label(root, text="Label")

    # Place the label at specific coordinates
    label.place(x=50, y=50)
'''

'''
    #Test of color options
    root = Tk()
    root.title("Color Options in Tkinter")

    # Create a button with active background and foreground colors
    button = Button(root, text="Click Me", activebackground="blue", activeforeground="white")
    button.pack()

    #Create a label with background and foreground colors
    label = Label(root, text="Hello, Tkinter!", bg="lightgray", fg="red")
    label.pack()

    # Create an Entry widget with selection colors
    entry = Entry(root, selectbackground="lightblue", selectforeground="green")
    entry.pack()

    root.mainloop()
    '''

-----
Use Lambda:
def main():    
    app = Window("tlhIngan Hol ghojmoHwI' boQ", 400, 400)
    lbl_subtitle = app.AddLabel("Klingon Hol Teacher's Aid", 0, 0)
    # Use lambda to delay execution until button click
    btn_verb_prefix = app.AddButton("Verb Prefix Table", lambda: verb_prefix_table(app), 1, 0)
    app.Run()

Make as method
class Window:
    def __init__(self, title, height, width):
        self.root = Tk()
        self.root.title(title)
        self.root.geometry(f"{width}x{height}")

    def show_verb_prefix_table(self):  # Method of the class
        C_H_BG_COLOR="grey"
        C_H_FG_COLOR="red"
        vp = self.SpawnSubWindow()  # Note: using self here
        # ... rest of your table creation code ...

    def AddButton(self, text, command, row, column, col_span=1):
        btn = Button(self.root, text=text, command=command)
        btn.grid(row=row, column=column, columnspan=col_span)
        return btn

# Then in main:
def main():    
    app = Window("tlhIngan Hol ghojmoHwI' boQ", 400, 400)
    lbl_subtitle = app.AddLabel("Klingon Hol Teacher's Aid", 0, 0)
    btn_verb_prefix = app.AddButton("Verb Prefix Table", app.show_verb_prefix_table, 1, 0)
    app.Run()

Keep Window generic
class Window:
    # Your generic window functionality
    # (keep this as-is, with all generic methods)
    pass

class KlingonTeacherWindow(Window):
    def __init__(self, title, height, width):
        super().__init__(title, height, width)
        self.setup_ui()  # Set up the specific UI elements

    def setup_ui(self):
        self.AddLabel("Klingon Hol Teacher's Aid", 0, 0)
        self.AddButton("Verb Prefix Table", self.show_verb_prefix_table, 1, 0)

    def show_verb_prefix_table(self):
        # Your verb prefix table code here
        pass

def main():
    app = KlingonTeacherWindow("tlhIngan Hol ghojmoHwI' boQ", 400, 400)
    app.Run()

    ----------------------------------------------------

     self.entry_box[0][1] = self.AddEntry(self.answers[0][1], 2, 2)
        self.entry_box[0][2] = self.AddEntry(self.answers[0][2], 2, 3)
        self.entry_box[0][3] = self.AddEntry(self.answers[0][3], 2, 4)
        self.entry_box[0][4] = self.AddEntry(self.answers[0][4], 2, 5)
        self.entry_box[0][5] = self.AddEntry(self.answers[0][5], 2, 6)
        self.entry_box[0][6] = self.AddEntry(self.answers[0][6], 2, 7)
    
        #you-OBJECT Row
        self.entry_box[0][0] = self.AddLabel(self.answers[1][0], 3, 1)
        self.entry_box[0][0] = self.AddLabel(self.answers[1][1], 3, 2)
        self.entry_box[0][0] = self.AddLabel(self.answers[1][2], 3, 3)
        self.entry_box[0][0] = self.AddLabel(self.answers[1][3], 3, 4)
        self.entry_box[0][0] = self.AddLabel(self.answers[1][4], 3, 5)
        self.entry_box[0][0] = self.AddLabel(self.answers[1][5], 3, 6)
        self.entry_box[0][0] = self.AddLabel(self.answers[1][6], 3, 7)
    
        #he/she/it-OBJECT Row
        self.entry_box[0][0] = self.AddLabel(self.answers[2][0], 4, 1)
        self.entry_box[0][0] = self.AddLabel(self.answers[2][1], 4, 2)
        self.entry_box[0][0] = self.AddLabel(self.answers[2][2], 4, 3)
        entry_hhi_hhi = self.AddLabel(self.answers[2][3], 4, 4)
        entry_hhi_us = self.AddLabel(self.answers[2][4], 4, 5)
        entry_hhi_youp = self.AddLabel(self.answers[2][5], 4, 6)
        entry_hhi_them = self.AddLabel(self.answers[2][6], 4, 7)
    
        #we-OBJECT Row
        entry_we_none = self.AddLabel(self.answers[3][0], 5, 1)
        entry_we_me = self.AddLabel(self.answers[3][1], 5, 2)
        entry_we_you = self.AddLabel(self.answers[3][2], 5, 3)
        entry_we_hhi = self.AddLabel(self.answers[3][3], 5, 4)
        entry_we_us = self.AddLabel(self.answers[3][4], 5,  5)
        entry_we_youp = self.AddLabel(self.answers[3][5], 5, 6)
        entry_we_them = self.AddLabel(self.answers[3][6], 5, 7)
    
        #you(plural)-OBJECT Row
        entry_youp_none = self.AddLabel(self.answers[4][0], 6, 1)
        entry_youp_me = self.AddLabel(self.answers[4][1], 6, 2)
        entry_youp_you = self.AddLabel(self.answers[4][2], 6, 3)
        entry_youp_hhi = self.AddLabel(self.answers[4][3], 6, 4)
        entry_youp_us = self.AddLabel(self.answers[4][4], 6, 5)
        entry_youp_youp = self.AddLabel(self.answers[4][5], 6, 6)
        entry_youp_them = self.AddLabel(self.answers[4][6], 6, 7)
    
        #they-OBJECT Row
        entry_they_none = self.AddLabel(self.answers[5][0], 7, 1)
        entry_they_me = self.AddLabel(self.answers[5][1], 7, 2)
        entry_they_you = self.AddLabel(self.answers[5][2], 7, 3)
        entry_they_hhi = self.AddLabel(self.answers[5][3], 7, 4)
        entry_they_us = self.AddLabel(self.answers[5][4], 7, 5)
        entry_they_youp = self.AddLabel(self.answers[5][5], 7, 6)
        entry_they_them = self.AddLabel(self.answers[5][6], 7, 7)

        def verb_prefix_table_ref(tableWin):
    # Column Names
    lbl_col_title = tableWin.AddLabel("OBJECT", 0, 0)
    lbl_col_title ["fg"] = C_H_BG_COLOR
    lbl_col_title ["bg"] = C_H_FG_COLOR
    lbl_col_none = tableWin.AddLabel("none", 0, 1)
    lbl_col_none["fg"] = C_H_BG_COLOR
    lbl_col_none["bg"] = C_H_FG_COLOR
    lbl_col_me = tableWin.AddLabel("me", 0, 2)
    lbl_col_me["fg"] = C_H_BG_COLOR
    lbl_col_me["bg"] = C_H_FG_COLOR
    lbl_col_you = tableWin.AddLabel("you", 0, 3)
    lbl_col_you["fg"] = C_H_BG_COLOR
    lbl_col_you["bg"] = C_H_FG_COLOR
    lbl_col_hhi = tableWin.AddLabel("him/her/it", 0, 4)
    lbl_col_hhi["fg"] = C_H_BG_COLOR
    lbl_col_hhi["bg"] = C_H_FG_COLOR
    lbl_col_us = tableWin.AddLabel("us", 0, 5)
    lbl_col_us["fg"] = C_H_BG_COLOR
    lbl_col_us["bg"] = C_H_FG_COLOR
    lbl_col_youp = tableWin.AddLabel("you (plural)", 0, 6)
    lbl_col_youp["fg"] = C_H_BG_COLOR
    lbl_col_youp["bg"] = C_H_FG_COLOR
    lbl_col_them = tableWin.AddLabel("them", 0, 7)
    lbl_col_them["fg"] = C_H_BG_COLOR
    lbl_col_them["bg"] = C_H_FG_COLOR

    # Rows Names
    lbl_row_title = tableWin.AddLabel("SUBJECT", 1, 0)
    lbl_row_title["fg"]=R_H_FG_COLOR
    lbl_row_title["bg"]=R_H_BG_COLOR
    lbl_row_title = tableWin.AddLabel("I", 2, 0)
    lbl_row_title["fg"]=R_H_FG_COLOR
    lbl_row_title["bg"]=R_H_BG_COLOR
    lbl_row_title = tableWin.AddLabel("you", 3, 0)
    lbl_row_title["fg"]=R_H_FG_COLOR
    lbl_row_title["bg"]=R_H_BG_COLOR
    lbl_row_title = tableWin.AddLabel("he/she/it", 4, 0)
    lbl_row_title["fg"]=R_H_FG_COLOR
    lbl_row_title["bg"]=R_H_BG_COLOR
    lbl_row_title = tableWin.AddLabel("we", 5, 0)
    lbl_row_title["fg"]=R_H_FG_COLOR
    lbl_row_title["bg"]=R_H_BG_COLOR
    lbl_row_title = tableWin.AddLabel("you(plural)", 6, 0)
    lbl_row_title["fg"]=R_H_FG_COLOR
    lbl_row_title["bg"]=R_H_BG_COLOR
    lbl_row_title = tableWin.AddLabel("they", 7, 0)
    lbl_row_title["fg"]=R_H_FG_COLOR
    lbl_row_title["bg"]=R_H_BG_COLOR

    #I-OBJECT Row
    lbl_row_i_none = tableWin.AddLabel("jI-", 2, 1)
    lbl_row_i_none["fg"]=CELL_FG_COLOR
    lbl_row_i_none["bg"]=CELL_BG_COLOR 
    lbl_row_i_me = tableWin.AddLabel("---", 2, 2)
    lbl_row_i_me["fg"]=CELL_FG_COLOR
    lbl_row_i_me["bg"]=CELL_BG_COLOR 
    lbl_row_i_you = tableWin.AddLabel("qa-", 2, 3)
    lbl_row_i_you["fg"]=CELL_FG_COLOR
    lbl_row_i_you["bg"]=CELL_BG_COLOR 
    lbl_row_i_hhi = tableWin.AddLabel("vI-", 2, 4)
    lbl_row_i_hhi["fg"]=CELL_FG_COLOR
    lbl_row_i_hhi["bg"]=CELL_BG_COLOR 
    lbl_row_i_us = tableWin.AddLabel("---", 2, 5)
    lbl_row_i_us["fg"]=CELL_FG_COLOR
    lbl_row_i_us["bg"]=CELL_BG_COLOR 
    lbl_row_i_youp = tableWin.AddLabel("Sa-", 2, 6)
    lbl_row_i_youp["fg"]=CELL_FG_COLOR
    lbl_row_i_youp["bg"]=CELL_BG_COLOR 
    lbl_row_i_them = tableWin.AddLabel("vI-", 2, 7)
    lbl_row_i_them["fg"]=CELL_FG_COLOR
    lbl_row_i_them["bg"]=CELL_BG_COLOR 

    #you-OBJECT Row
    lbl_row_you_none = tableWin.AddLabel("bI-", 3, 1)
    lbl_row_you_none["fg"]=CELL_FG_COLOR
    lbl_row_you_none["bg"]=CELL_BG_COLOR
    lbl_row_you_me = tableWin.AddLabel("cho-", 3, 2)
    lbl_row_you_me["fg"]=CELL_FG_COLOR
    lbl_row_you_me["bg"]=CELL_BG_COLOR
    lbl_row_you_you = tableWin.AddLabel("---", 3, 3)
    lbl_row_you_you["fg"]=CELL_FG_COLOR
    lbl_row_you_you["bg"]=CELL_BG_COLOR
    lbl_row_you_hhi = tableWin.AddLabel("Da-", 3, 4)
    lbl_row_you_hhi["fg"]=CELL_FG_COLOR
    lbl_row_you_hhi["bg"]=CELL_BG_COLOR
    lbl_row_you_us = tableWin.AddLabel("ju-", 3, 5)
    lbl_row_you_us["fg"]=CELL_FG_COLOR
    lbl_row_you_us["bg"]=CELL_BG_COLOR
    lbl_row_you_youp = tableWin.AddLabel("---", 3, 6)
    lbl_row_you_youp["fg"]=CELL_FG_COLOR
    lbl_row_you_youp["bg"]=CELL_BG_COLOR
    lbl_row_you_them = tableWin.AddLabel("Da-", 3, 7)
    lbl_row_you_them["fg"]=CELL_FG_COLOR
    lbl_row_you_them["bg"]=CELL_BG_COLOR

    #he/she/it-OBJECT Row
    lbl_row_hhi_none = tableWin.AddLabel("0", 4, 1)
    lbl_row_hhi_none["fg"]=CELL_FG_COLOR
    lbl_row_hhi_none["bg"]=CELL_BG_COLOR
    lbl_row_hhi_me = tableWin.AddLabel("mu-", 4, 2)
    lbl_row_hhi_me["fg"]=CELL_FG_COLOR
    lbl_row_hhi_me["bg"]=CELL_BG_COLOR
    lbl_row_hhi_you = tableWin.AddLabel("Du-", 4, 3)
    lbl_row_hhi_you["fg"]=CELL_FG_COLOR
    lbl_row_hhi_you["bg"]=CELL_BG_COLOR
    lbl_row_hhi_hhi = tableWin.AddLabel("0", 4, 4)
    lbl_row_hhi_hhi["fg"]=CELL_FG_COLOR
    lbl_row_hhi_hhi["bg"]=CELL_BG_COLOR
    lbl_row_hhi_us = tableWin.AddLabel("nu-", 4, 5)
    lbl_row_hhi_us["fg"]=CELL_FG_COLOR
    lbl_row_hhi_us["bg"]=CELL_BG_COLOR
    lbl_row_hhi_youp = tableWin.AddLabel("lI-", 4, 6)
    lbl_row_hhi_youp["fg"]=CELL_FG_COLOR
    lbl_row_hhi_youp["bg"]=CELL_BG_COLOR
    lbl_row_hhi_them = tableWin.AddLabel("0", 4, 7)
    lbl_row_hhi_them["fg"]=CELL_FG_COLOR
    lbl_row_hhi_them["bg"]=CELL_BG_COLOR

    #we-OBJECT Row
    lbl_row_we_none = tableWin.AddLabel("ma-", 5, 1)
    lbl_row_we_none["fg"]=CELL_FG_COLOR
    lbl_row_we_none["bg"]=CELL_BG_COLOR
    lbl_row_we_me = tableWin.AddLabel("---", 5, 2)
    lbl_row_we_me["fg"]=CELL_FG_COLOR
    lbl_row_we_me["bg"]=CELL_BG_COLOR
    lbl_row_we_you = tableWin.AddLabel("pI-", 5, 3)
    lbl_row_we_you["fg"]=CELL_FG_COLOR
    lbl_row_we_you["bg"]=CELL_BG_COLOR
    lbl_row_we_hhi = tableWin.AddLabel("wI-", 5, 4)
    lbl_row_we_hhi["fg"]=CELL_FG_COLOR
    lbl_row_we_hhi["bg"]=CELL_BG_COLOR
    lbl_row_we_us = tableWin.AddLabel("---", 5,  5)
    lbl_row_we_us["fg"]=CELL_FG_COLOR
    lbl_row_we_us["bg"]=CELL_BG_COLOR
    lbl_row_we_youp = tableWin.AddLabel("re-", 5, 6)
    lbl_row_we_youp["fg"]=CELL_FG_COLOR
    lbl_row_we_youp["bg"]=CELL_BG_COLOR
    lbl_row_we_them = tableWin.AddLabel("DI-", 5, 7)
    lbl_row_we_them["fg"]=CELL_FG_COLOR
    lbl_row_we_them["bg"]=CELL_BG_COLOR

    #you(plural)-OBJECT Row
    lbl_row_youp_none = tableWin.AddLabel("Su-", 6, 1)
    lbl_row_youp_none["fg"]=CELL_FG_COLOR
    lbl_row_youp_none["bg"]=CELL_BG_COLOR
    lbl_row_youp_me = tableWin.AddLabel("tu-", 6, 2)
    lbl_row_youp_me["fg"]=CELL_FG_COLOR
    lbl_row_youp_me["bg"]=CELL_BG_COLOR
    lbl_row_youp_you = tableWin.AddLabel("---", 6, 3)
    lbl_row_youp_you["fg"]=CELL_FG_COLOR
    lbl_row_youp_you["bg"]=CELL_BG_COLOR
    lbl_row_youp_hhi = tableWin.AddLabel("bo-", 6, 4)
    lbl_row_youp_hhi["fg"]=CELL_FG_COLOR
    lbl_row_youp_hhi["bg"]=CELL_BG_COLOR
    lbl_row_youp_us = tableWin.AddLabel("cho-", 6, 5)
    lbl_row_youp_us["fg"]=CELL_FG_COLOR
    lbl_row_youp_us["bg"]=CELL_BG_COLOR
    lbl_row_youp_youp = tableWin.AddLabel("---", 6, 6)
    lbl_row_youp_youp["fg"]=CELL_FG_COLOR
    lbl_row_youp_youp["bg"]=CELL_BG_COLOR
    lbl_row_youp_them = tableWin.AddLabel("bo-", 6, 7)
    lbl_row_youp_them["fg"]=CELL_FG_COLOR
    lbl_row_youp_them["bg"]=CELL_BG_COLOR

    #they-OBJECT Row
    lbl_row_they_none = tableWin.AddLabel("0", 7, 1)
    lbl_row_they_none["fg"]=CELL_FG_COLOR
    lbl_row_they_none["bg"]=CELL_BG_COLOR
    lbl_row_they_me = tableWin.AddLabel("mu-", 7, 2)
    lbl_row_they_me["fg"]=CELL_FG_COLOR
    lbl_row_they_me["bg"]=CELL_BG_COLOR
    lbl_row_they_you = tableWin.AddLabel("nI-", 7, 3)
    lbl_row_they_you["fg"]=CELL_FG_COLOR
    lbl_row_they_you["bg"]=CELL_BG_COLOR
    lbl_row_they_hhi = tableWin.AddLabel("lu-", 7, 4)
    lbl_row_they_hhi["fg"]=CELL_FG_COLOR
    lbl_row_they_hhi["bg"]=CELL_BG_COLOR
    lbl_row_they_us = tableWin.AddLabel("nu-", 7, 5)
    lbl_row_they_us["fg"]=CELL_FG_COLOR
    lbl_row_they_us["bg"]=CELL_BG_COLOR
    lbl_row_they_youp = tableWin.AddLabel("lI-", 7, 6)
    lbl_row_they_youp["fg"]=CELL_FG_COLOR
    lbl_row_they_youp["bg"]=CELL_BG_COLOR
    lbl_row_they_them = tableWin.AddLabel("0", 7, 7)
    lbl_row_they_them["fg"]=CELL_FG_COLOR
    lbl_row_they_them["bg"]=CELL_BG_COLOR

------------------ CENTERING DOES NOT WORK 
def center_window(win, width, height):
    print(f"Window size: {width}x{height}")
    win.geometry("{}x{}+{}+{}".format(width, height, 0, 0))
    win.update_idletasks()

    screen_width = win.winfo_screenwidth()
    screen_height = win.winfo_screenheight()
    
    x_cordinate = int((screen_width/2) - (width/2))
    y_cordinate = int((screen_height/2) - (height/2))

    x = (screen_width - width) // 2
    y = (screen_height - height) // 2

    win.geometry("{}x{}+{}+{}".format(width, height, x, y))


def center_window_b(win, width, height):
        # Set size first
    win.geometry(f"{width}x{height}")
    win.update_idletasks()
    
    # Get screen dimensions directly
    screen_width = win.winfo_screenwidth()
    screen_height = win.winfo_screenheight()
    
    # Calculate center position
    x = (screen_width - width) // 2
    y = (screen_height - height) // 2
    
    # Final positioning
    win.geometry(f"{width}x{height}+{x}+{y}")
    
    print(f"Screen dimensions: {screen_width}x{screen_height}")
    print(f"Window size: {width}x{height}")
    print(f"Position: +{x}+{y}")